------------------------------------------------------------------------------
-- user_logic.vhd - entity/architecture pair
------------------------------------------------------------------------------
--
-- ***************************************************************************
-- ** All code in marked user sections and additions to Xilinx, Inc.        **
-- ** generated code are                                                    **
-- **
-- ** Copyright (c) 2013 Assured Information Security, All Rights reserved. **
-- **                                                                       **
-- ** To the fullest extent permitted by law, all express, implied,         **
-- ** statutory or other warranties, guarantees or representations,         **
-- ** including but not limited to, the implied warranties of               **
-- ** merchantability, fitness for a particular purpose, or non-            **
-- ** infringement, are expressly disclaimed in every way whatsoever.       **
-- ***************************************************************************
--
-- ***************************************************************************
-- ** Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.            **
-- **                                                                       **
-- ** Xilinx, Inc.                                                          **
-- ** XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"         **
-- ** AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND       **
-- ** SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,        **
-- ** OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,        **
-- ** APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION           **
-- ** THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,     **
-- ** AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE      **
-- ** FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY              **
-- ** WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE               **
-- ** IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR        **
-- ** REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF       **
-- ** INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS       **
-- ** FOR A PARTICULAR PURPOSE.                                             **
-- **                                                                       **
-- ***************************************************************************
--
--------------------------------------------------------------------------------
-- Filename:          user_logic.vhd
-- Version:           1.00.a
-- Description:       Utilizes Xilinx EDK(R) generated drivers to expose
--                    block memory both to Xilinx EDK(R) software and other
--                    in-fabric hardware
-- Date Created:      Tue, Dec 17, 2013 15:20:13
-- Last Modified:     Thu, Dec 19, 2013 15:20:28
-- VHDL Standard:     VHDL'93
-- Author:            Sean McClain <mcclains@ainfosec.com>,
--                    Contains code generated by Create and Import Peripheral
--                    Wizard
-- Copyright:         (c) 2013 Assured Information Security, All Rights Reserved
------------------------------------------------------------------------------
-- Naming Conventions:
--   active low signals:                    "*_n"
--   clock signals:                         "clk", "clk_div#", "clk_#x"
--   reset signals:                         "rst", "rst_n"
--   generics:                              "C_*"
--   user defined types:                    "*_TYPE"
--   state machine next state:              "*_ns"
--   state machine current state:           "*_cs"
--   combinatorial signals:                 "*_com"
--   pipelined or register delay signals:   "*_d#"
--   counter signals:                       "*cnt*"
--   clock enable signals:                  "*_ce"
--   internal version of output port:       "*_i"
--   device pins:                           "*_pin"
--   ports:                                 "- Names begin with Uppercase"
--   processes:                             "*_PROCESS"
--   component instantiations:              "<ENTITY_>I_<#|FUNC>"
------------------------------------------------------------------------------

-- IGNORE ``DO NOT EDIT'' WARNINGS BELOW THIS LINE AFTER READING COMMENTS

-- DO NOT EDIT BELOW THIS LINE --------------------
library ieee;
use ieee.std_logic_1164.all;
-- DO NOT EDIT ABOVE THIS LINE --------------------

-- BEGIN COMMENTS

-- Xilinx(R) has been made aware that the combination of libraries
-- ieee.std_logic_arith and ieee.std_logic_unsigned is a deprecated combination,
-- and has chosen to retain this combination for code stability reasons.

-- However, IEEE has provided the library ieee.numeric_std. This library
-- is reverse compatible with any code that uses the deprecated libraries,
-- is actively maintained, is more stable, is in accord with IEEE standards,
-- and for these reasons and several others, should always be used without
-- exception in any new VHDL code that would otherwise have used the
-- deprecated combination.

-- Despite the names, ieee.std_logic_arith and ieee.std_logic_unsigned are NOT
-- IEEE standard libraries. They were originally invented by a hardware vendor,
-- and other hardware vendors have since come up with their own non-standardized
-- versions.

-- Please refer to the following comp.lang.vhdl links for more information:
-- https://groups.google.com/forum/#!search/std_logic_unsigned$20hideous$20hack/comp.lang.vhdl/DAwwh2rZrYE/duK3_es4D60J
-- https://groups.google.com/forum/#!search/std_logic_unsigned$20hideous$20hack/comp.lang.vhdl/OJZ33WD3uRw/BNqu_4R1G6EJ
-- https://groups.google.com/forum/#!search/std_logic_unsigned$20hideous$20hack/comp.lang.vhdl/OJZ33WD3uRw/vSDA8hTP9jUJ

-- END COMMENTS

use ieee.numeric_std.all;

-- DO NOT EDIT BELOW THIS LINE --------------------
library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;
-- DO NOT EDIT ABOVE THIS LINE --------------------

-- IGNORE ``DO NOT EDIT'' WARNINGS ABOVE THIS LINE AFTER READING COMMENTS

--USER libraries added here
library edkregfile_v1_00_a;
use edkregfile_v1_00_a.memory;

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------

    -- Number of real 32-bit addressable registers
    NUM_REGS                       : integer              := 1024;

    -- Number of clock controlled I/O channels exposed to other hardware
    NUM_CHANNELS                   : integer              := 32;

    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 32;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------

    -- Clock-controlled I/O channels which can be individually
    --  enabled/disabled for reads and writes
    data_in                        : in    std_logic_vector (
        NUM_CHANNELS*C_SLV_DWIDTH-1 downto 0
        );
    data_out                       : out   std_logic_vector (
        NUM_CHANNELS*C_SLV_DWIDTH-1 downto 0
        );

    -- Addresses for each I/O channel. Used by both reads and writes.
    -- A read signal has priority over a write signal.
    addresses                      : in    std_logic_vector (
        NUM_CHANNELS*C_SLV_DWIDTH-1 downto 0
        );

    -- Read/Write enables for each I/O channel
    enables                        : in    std_logic_vector (
        NUM_CHANNELS-1 downto 0
        );

    -- Lets hardware peripherals set the data mode
    data_mode                      : in    std_logic;

    -- hardware acks, reads or writes were performed
    rd_ack        : out   std_logic;
    wr_ack        : out   std_logic;

    -- a clock signal that can be turned on or off through EDK
    pulse         : out   std_logic;

    -- exposed and inverted AXI reset signal
    reset_out     : out   std_logic;

    -- ADD USER PORTS ABOVE THIS LINE ------------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );

  attribute MAX_FANOUT : string;
  attribute SIGIS : string;

  attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
  attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic is

  --USER signal declarations added here, as needed for user logic

  -- Use the 5 bit incoming address space to select between a series of
  --  actions
  constant CODE_NO_ACTION   : integer := 0;
  constant CODE_SET_ADDRESS : integer := 1;
  constant CODE_SET_DATA    : integer := 2;
  constant CODE_PERFORM_OP  : integer := 3;
  constant CODE_CLEAR       : integer := 4;
  constant CODE_PULSE       : integer := 5;

  -- used to synthesize a C_NUM_REG -> log_2(C_NUM_REG) encoder
  type encoder_type is array(C_NUM_REG downto 0)
    of integer;

  -- C_NUM_REG -> log_2(C_NUM_REG) encoders for AXI4-Lite(R) provided addresses
  signal read_address      : encoder_type;
  signal write_address     : encoder_type;

  -- data and acknowledgements to be read back out to AXI4-Lite(R)
  signal slv_read_ack      : std_logic_vector(C_SLV_DWIDTH downto 0);
  signal slv_write_ack     : std_logic_vector(C_SLV_DWIDTH downto 0);

  -- invert meaning of incoming reset signal
  signal reset             : std_logic;

  -- Whether to read or write during the current clock cycle
  -- 0 : read, 1 : write
  signal mode              : std_logic;

  -- separate channels for AXI4-Lite data
  signal side_address      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal side_data_in      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal side_data_out     : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal side_enable       : std_logic;

  -- clear value
  signal zero              : std_logic_vector(C_SLV_DWIDTH-1 downto 0);

  -- keep the state of the outbound clock
  signal out_clk           : std_logic;

begin

  --USER logic implementation added here

  -- initialize
  zero <= (others => '0');
  slv_read_ack(0)  <= data_mode;
  slv_write_ack(0) <= data_mode;
  write_address(0) <= 0;
  read_address(0)  <= 0;

  -- Invert the meaning of the incoming reset signal and expose it
  with Bus2IP_Resetn select reset <=
    '1' when '0',
    '0' when others;
  reset_out <= reset;

  -- select mode, 0 is read, 1 is write
  with slv_read_ack(C_NUM_REG) select mode <=
    '0' when '1',
    slv_write_ack(C_NUM_REG) when others;

  -- drive signals outbound to AXI4-Lite(R)
  IP2Bus_Data  <=
    side_data_out when slv_read_ack(C_NUM_REG) = '1'
    else (others => '0');
  IP2Bus_WrAck <= slv_write_ack(C_NUM_REG);
  IP2Bus_RdAck <= slv_read_ack(C_NUM_REG);
  IP2Bus_Error <= '0';

  ---
  -- Integer encode all incoming "addresses", and set enable bits
  --
  -- AXI4-Lite(R) uses n-to-2^n decoded addresses in the following format:
  --
  -- +------------------+------------------+
  -- | Incoming address | Inferred Address |
  -- +------------------+------------------+
  -- | 0x800...000      | 0                |
  -- | 0x400...000      | 1                |
  -- | 0x200...000      | 2                |
  -- | 0x000...100      | C_NUM_REG-9      |
  -- | 0x000...080      | C_NUM_REG-8      |
  -- | 0x000...001      | C_NUM_REG-1      |
  -- +------------------+------------------+
  --
  -- In other words, there is only 1 high bit, and its distance from the
  --  leftmost bit little endian is the register number in a log_2(C_NUM_REG)
  --  bit space.
  --
  -- If any bit in an "address" signal is high, AXI4-Lite(R) treats this
  --  as an acknowledgement; set ack bits accordingly as well. Hardware
  --  I/O is detected in the same manner.
  ---
  DECODE_ADDRESSES : for i in 1 to C_NUM_REG
  generate
    with Bus2IP_RdCE(C_NUM_REG-i) select read_address(i) <=
      i-1 when '1',
      read_address(i-1) when others;
    with Bus2IP_RdCE(C_NUM_REG-i) select slv_read_ack(i) <=
      '1' when '1',
      slv_read_ack(i-1) when others;
    with Bus2IP_WrCE(C_NUM_REG-i) select write_address(i) <=
      i-1 when '1',
      write_address(i-1) when others;
    with Bus2IP_WrCE(C_NUM_REG-i) select slv_write_ack(i) <=
      '1' when '1',
      slv_write_ack(i-1) when others;
  end generate DECODE_ADDRESSES;

  ---
  -- The AXI4-Lite(R) has its own dedicated I/O channel.
  --  This side channel is populated here.
  --
  -- AXI4-Lite(R) "address" bits are used to select read/write operations,
  --  in accord with the following state table:
  --
  -- +---+-------------------+
  -- | 0 | No action         |
  -- | 1 | Set address       |
  -- | 2 | Set data          |
  -- | 3 | Perform operation |
  -- | 4 | Clear             |
  -- | 5 | Pulse             |
  -- +---+-------------------+
  --
  -- "Pulse" turns on an outbound clock
  --
  -- Note that AXI4-Lite(R) inputs are clock synced. Data read out to the
  -- AXI4-Lite(R) bus, however, is async and on demand.
  ---
  UPDATE_SIDE_CHANNEL : process ( Bus2IP_Clk )
  is
  begin

    -- synch up writes on the high clock edge
    CLOCK_SYNC : if ( Bus2IP_Clk'event  and Bus2IP_Clk = '1' )
    then

      -- use the incoming 5-bit address to decide how to handle software data
      case write_address(C_NUM_REG) is

      -- software data is a 32-bit address
        when CODE_SET_ADDRESS =>
          side_address <= Bus2IP_Data;

      -- software data is indeed data
        when CODE_SET_DATA =>
          side_data_in <= Bus2IP_Data;

      -- ignore software data and perform a reset
        when CODE_CLEAR =>
          side_address <= zero;
          side_data_in <= zero;
          out_clk <= '0';

      -- send an outbound clock signal
        when CODE_PULSE =>
          out_clk <= '1' xor out_clk;
          pulse <= out_clk;

      -- code not accounted for
        when others =>
          null;

      end case;

    end if CLOCK_SYNC;
  end process UPDATE_SIDE_CHANNEL;

  -- once a 32-bit address and software data have been set,
  --  this is the signal to actually perform the desired operation
  side_enable <=
    '1' when
      -- writes are clock sync
      ( write_address(C_NUM_REG) = CODE_PERFORM_OP and Bus2IP_Clk = '1' )

      -- reads are async
      or read_address(C_NUM_REG)  = CODE_PERFORM_OP
    else '0';

  ---
  -- Actual memory registers
  ---
  ALL_MEM : entity edkregfile_v1_00_a.memory
    generic map
    (
      NUM_REGS     => NUM_REGS,
      NUM_CHANNELS => NUM_CHANNELS,
      DATA_WIDTH   => C_SLV_DWIDTH
    )
    port map
    (
      addresses     => addresses,
      data_in       => data_in,
      data_out      => data_out,
      enables       => enables,
      side_address  => side_address,
      side_data_in  => side_data_in,
      side_data_out => side_data_out,
      side_enable   => side_enable,
      mode          => mode,
      rd_ack        => rd_ack,
      wr_ack        => wr_ack,
      reset         => reset,
      clock         => Bus2IP_Clk
    );

end IMP;

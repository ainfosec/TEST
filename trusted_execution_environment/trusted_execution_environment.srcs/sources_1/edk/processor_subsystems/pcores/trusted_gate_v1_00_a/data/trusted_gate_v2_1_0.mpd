###################################################################
##
## Name     : trusted_gate
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN trusted_gate

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = TRUSTED_GATE
OPTION LONG_DESC = a thingie what does stuff or maybe not
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## I/O Interfaces
IO_INTERFACE IO_IF = gpio_0, IO_TYPE = XIL_AXI_GPIO_V1

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_USE_WSTRB = 0, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x200, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_NUM_MEM = 1, DT = INTEGER
PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI

## User Generics
PARAMETER C_PERMISSIONS_DWIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_NUM_REG = 32, DT = INTEGER, RANGE = (C_PERMISSIONS_DWIDTH:2147483647)
PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER, RANGE = (C_PERMISSIONS_DWIDTH:2147483647)
PARAMETER C_S_AXI_SUPPORTS_USER_SIGNALS = 0, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_AWUSER_WIDTH = 32, DT = INTEGER, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_S_AXI_ARUSER_WIDTH = 32, DT = INTEGER, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_GPIO_WIDTH = 32, DT = INTEGER, RANGE = (1:32), IO_IF = gpio_0, IO_IS = num_bits

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

## User Ports

# AXI
PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI, DESC = 'Trusted write requested'
PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI, DESC = 'Trusted read requested'
PORT S_AXI_AWUSER = AWUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_AWUSER_WIDTH-1):0], DESC = 'Incoming user write signal'
PORT S_AXI_ARUSER = ARUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0], DESC = 'Incoming user read signal'
PORT M_AXI_AWPROT = "", DIR = O, VEC = [2:0], DESC = 'Trusted write requested'
PORT M_AXI_ARPROT = "", DIR = O, VEC = [2:0], DESC = 'Trusted read requested'
PORT M_AXI_AWUSER = "", DIR = O, VEC = [(C_S_AXI_AWUSER_WIDTH-1):0], DESC = 'Outgoing user write signal'
PORT M_AXI_ARUSER = "", DIR = O, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0], DESC = 'Outgoing user read signal'

# Block Memory
PORT S_BRAM_RE = "", DIR = I, DESC = 'incoming BRAM read (low = disable, high = enable)'
PORT S_BRAM_WE = "", DIR = I, DESC = 'incoming BRAM write (low = disable, high = enable)'
PORT M_BRAM_RE = "", DIR = O, DESC = 'outgoing BRAM read (low = disable, high = enable)'
PORT M_BRAM_WE = "", DIR = O, DESC = 'outgoing BRAM write (low = disable, high = enable)'

# GPIO
PORT S_GPIO_IO_I = "", DIR = O, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_data_in, DESC = 'Incoming GPIO Input'
PORT S_GPIO_IO_O = "", DIR = I, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_data_out, DESC = 'Incoming GIPO Output'
PORT S_GPIO_IO_T = "", DIR = I, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_tri_out, DESC = 'Incoming GIPO 3-State'
PORT M_GPIO_IO_I = "", DIR = I, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_data_in, DESC = 'Outgoing GPIO Input'
PORT M_GPIO_IO_O = "", DIR = O, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_data_out, DESC = 'Outgoing GPIO Output'
PORT M_GPIO_IO_T = "", DIR = O, VEC = [(C_GPIO_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = gpio_0, IO_IS = gpio_tri_out, DESC = 'Outgoing GPIO 3-State'

# IRQ
PORT S_IRQ = "", DIR = I, SIGIS = INTERRUPT, DESC = 'Interrupt Input'
PORT M_IRQ = "", DIR = O, SIGIS = INTERRUPT, DESC = 'Interrupt Request Output'

# Control
PORT KEY_IN = "", DIR = I, VEC = [31:0], DESC = 'Incoming key associated with a permission set'
PORT TABLE_OUT = "", DIR = O, VEC = [(C_NUM_REG*C_PERMISSIONS_DWIDTH-1):0], DESC = 'Outgoing access control table state'

END
